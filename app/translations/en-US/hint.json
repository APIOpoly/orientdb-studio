{
    "login.newDb": "Create a new database",
    "login.importDb": "Import a public database",
    "login.deleteDb": "Drop the selected  database",
    "login.connectDb": "Connect to the selected database",
    "login.help": "To Login use any database user. By default <b>reader/reader</b> can read records from the database, <b>writer/writer</b> can read, create, update and delete records. <b>admin/admin</b> is God. To know more about security read the docs <a href='{{link}}'>here</a>",
    "browse.help": "Query help",
    "browse.clearHistory": "Clear history",
    "browse.searchHistory": "Search in history",
    "browse.run": "Run query",
    "browse.config": "Query help",
    "browse.addBookmark": "Add bookmark",
    "browse.showBookmark": "Toggle bookmarks",
    "schema.clusterSelection": "<ul class='clusterSelection'><li><strong>default</strong>, uses always the Class's <code>defaultClusterId</code> property. This was the default before 1.7</li><li><strong>round-robin</strong>, put the Class's configured clusters in a ring and returns a different cluster every time restarting from the first when the ring is completed</li><li><strong>balanced</strong>, checks the records in all the clusters and returns the smaller cluster. This allows the cluster to have all the underlying clusters balanced on size.</li></ul> For more details visit the <a href='{{linkClusterSelection}}'>docs</a>",
    "schema.clusters": "A cluster is a place where a group of records are stored. Perhaps the best equivalent in the relational world would be a Table. By default, OrientDB will create one cluster per class. All the records of a class are stored in the same cluster which has the same name as the class. For more details visit the <a href='{{linkClusters}}'>docs</a>",
    "schema.superClass": "OrientDB supports inheritance between classes. For more details about inheritance visit the <a href='{{linkInheritance}}'>docs</a>",
    "structure.conflictStrategy": "Used to handle conflicts when OrientDB's MVCC finds an update or delete operation executed against an old record. For more details about conflict strategy visit the <a href='{{linkConflictStrategy}}'>docs</a>",
    "configuration.conflictStrategy": "Used to handle conflicts when OrientDB's MVCC finds an update or delete operation executed against an old record. For more details about conflict strategy visit the <a href='{{conflictStrategy}}'>docs</a>",
    "configuration.clusterSelection": "Sets the default strategy used on selecting the cluster where to create new records. This setting is read on class creation. After creation, each class has own modifiable strategy. For more details about cluster selection visit the <a href='{{clusterSelection}}'>docs</a>",
    "configuration.minimumClusters": "Sets the minimum number of clusters to create automatically when a new class is created. By default is 1, but on multi CPU/core having multiple clusters/files improves read/write performance",
    "configuration.useLightweightEdges": "Starting from OrientDB v1.4.x edges, by default, are managed as lightweight edges: they don't have own identities as record, but are physically stored as links inside vertices. OrientDB automatically uses Lightweight edges only when edges have no properties, otherwise regular edges are used. For more details about lightweight edges visit the <a href='{{useLightweightEdges}}'>docs</a>",
    "class.property": "Properties are the fields of the class. For more details about properties and supported types visit the <a href='{{properties}}'>docs</a>",
    "class.indexes": "Indexes are used to speed up search. For more details about indexes and supported types visit the <a href='{{indexes}}'>docs</a>"

}